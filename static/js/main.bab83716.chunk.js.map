{"version":3,"sources":["Components/Navbar.js","Components/Task.js","Components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Task","props","useState","isStrike","setIsStrike","updating","setUpdating","title","setTitle","newInput","setNewInput","action","onSubmit","e","preventDefault","onChange","event","target","value","type","placeholder","onClick","style","textDecoration","fontStyle","onDelete","Card","tasks","setTasks","add","setAdd","needsTitle","changingTitle","setChangingTitle","newTitle","setNewTitle","map","task","index","indexDel","filter","key","handleRemove","App","cards","setCards","card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bab83716.chunk.js","sourcesContent":["import React from 'react';\r\nimport './nav.css';\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <div className=\"bar\">\r\n            <h1>Trello-Clone</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport './task.css';\r\n\r\nexport default function Task(props) {\r\n    const [isStrike, setIsStrike] = useState(false);\r\n    const [updating, setUpdating] = useState(false);\r\n    const [title, setTitle] = useState(props.title);\r\n    const [newInput, setNewInput] = useState('')\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        setTitle(newInput)\r\n        setUpdating(!updating)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"task\">\r\n            {/* Conditionally Render either item title or input box depending on updating state */}\r\n            {updating\r\n                ?\r\n                <form action=\"input\" onSubmit={handleUpdate} className=\"update-form\">\r\n                    <input \r\n                        onChange={event => setNewInput(event.target.value)}\r\n                        type=\"text\"\r\n                        className=\"update-task\" \r\n                        placeholder={title}\r\n                    />\r\n                </form>\r\n\r\n                :\r\n                <p \r\n                    onClick={() => setIsStrike(!isStrike)}\r\n                    style={isStrike ? {textDecoration: 'line-through', fontStyle: 'italic'} : {textDecoration: 'none'}}\r\n                    className=\"title\">\r\n                    {title}\r\n                </p>\r\n            }\r\n\r\n            {/* Right side buttons */}\r\n            <div className=\"buttons\">\r\n                <button className=\"edit-task\" onClick={() => setUpdating(!updating)}></button>\r\n                <button className=\"delete\" onClick={props.onDelete}>X</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './card.css';\r\nimport Task from './Task';\r\n\r\n\r\nexport default function Card(props) {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [add, setAdd] = useState('');\r\n    const [changingTitle, setChangingTitle] = useState(props.needsTitle);\r\n    const [title, setTitle] = useState(props.title);\r\n    const [newTitle, setNewTitle] = useState('')\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (add === ''){\r\n            return;\r\n        }\r\n        else{\r\n           setTasks([...tasks, add]) \r\n           setAdd('')\r\n        }\r\n    }\r\n\r\n    const updateTitle = (e) => {\r\n        e.preventDefault();\r\n        setTitle(newTitle)\r\n        setChangingTitle(!changingTitle)\r\n    }\r\n\r\n    const handleRemove = (indexDel) => {\r\n        setTasks(tasks.filter((task, index) => index !== indexDel));\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"title-div\">\r\n                {changingTitle\r\n                    ?\r\n                        <form action=\"\"  onSubmit={updateTitle}>\r\n                            <input\r\n                                onChange={event => setNewTitle(event.target.value)}\r\n                                type=\"text\"\r\n                                className=\"update-title\"\r\n                                placeholder={title}\r\n                            />\r\n                        </form>\r\n                    :\r\n                        <>\r\n                        <h3 onClick={() => setChangingTitle(!changingTitle)}>{title}</h3>\r\n                        </>   \r\n                }\r\n\r\n            </div>\r\n            \r\n            {tasks.map((task, index) => (\r\n                <Task title={task} onDelete={() => handleRemove(index)} key={index}/>\r\n            ))}\r\n\r\n            <form className=\"add-task\" action=\"input\" onSubmit={handleSubmit}>\r\n                <input value={add} type=\"text\" placeholder=\"Add Task\" onChange={event => setAdd(event.target.value)}/> \r\n                <button className=\"add-btn\" >+</button>  \r\n            </form>\r\n            <button onClick={props.handleRemove} className=\"delete-card\">Delete</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport './Components/card.css';\nimport Navbar from './Components/Navbar';\nimport Card from './Components/Card';\n\nfunction App() {\n  const [cards, setCards] = useState(['Make First Card']);\n\n  const handleCardRemove = (indexDel) => {\n    setCards(cards.filter((task, index) => index !== indexDel));\n  }\n\n  return (\n    <>\n    <Navbar />\n    <div className=\"contain\">\n      {cards.map((card, index) => (\n        <Card title={card} key={index} needsTitle={true} handleRemove={() => handleCardRemove(index)}/>\n      ))}\n      <button\n        className=\"new-list\"\n        onClick={() => setCards([...cards, 'New Card'])}\n        >New Task\n      </button>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}